const { Router } = require('express');
const fs = require('fs');
const path = require('path');

const router = Router();
const cartsPath = path.join(__dirname, '../../data/carts.json');

// Helper para leer y escribir en el archivo
const readCarts = () => JSON.parse(fs.readFileSync(cartsPath, 'utf-8'));
const writeCarts = (data) => fs.writeFileSync(cartsPath, JSON.stringify(data, null, 2));

// POST /api/carts
router.post('/', (req, res) => {
  const carts = readCarts();
  const newCart = {
    id: carts.length > 0 ? carts[carts.length - 1].id + 1 : 1,
    products: [],
  };
  carts.push(newCart);
  writeCarts(carts);
  res.status(201).json(newCart);
});

// GET /api/carts/:cid
router.get('/:cid', (req, res) => {
  const carts = readCarts();
  const cart = carts.find((c) => c.id === parseInt(req.params.cid));
  cart ? res.json(cart) : res.status(404).json({ error: 'Carrito no encontrado' });
});

// POST /api/carts/:cid/product/:pid
router.post('/:cid/product/:pid', (req, res) => {
  const carts = readCarts();
  const cart = carts.find((c) => c.id === parseInt(req.params.cid));
  if (!cart) return res.status(404).json({ error: 'Carrito no encontrado' });

  const productIndex = cart.products.findIndex((p) => p.id === parseInt(req.params.pid));
  if (productIndex !== -1) {
    cart.products[productIndex].quantity++;
  } else {
    cart.products.push({ id: parseInt(req.params.pid), quantity: 1 });
  }

  writeCarts(carts);
  res.json(cart);
});

module.exports = router;
