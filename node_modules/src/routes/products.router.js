const { Router } = require('express');
const fs = require('fs');
const path = require('path');

const router = Router();
const productsPath = path.join(__dirname, '../../data/products.json');

// Helper para leer y escribir en el archivo
const readProducts = () => JSON.parse(fs.readFileSync(productsPath, 'utf-8'));
const writeProducts = (data) => fs.writeFileSync(productsPath, JSON.stringify(data, null, 2));

// GET /api/products
router.get('/', (req, res) => {
  const products = readProducts();
  const { limit } = req.query;
  if (limit) {
    return res.json(products.slice(0, parseInt(limit)));
  }
  res.json(products);
});

// GET /api/products/:pid
router.get('/:pid', (req, res) => {
  const products = readProducts();
  const product = products.find((p) => p.id === parseInt(req.params.pid));
  product ? res.json(product) : res.status(404).json({ error: 'Producto no encontrado' });
});

// POST /api/products
router.post('/', (req, res) => {
  const products = readProducts();
  const newProduct = {
    id: products.length > 0 ? products[products.length - 1].id + 1 : 1,
    ...req.body,
    status: true,
  };
  products.push(newProduct);
  writeProducts(products);
  res.status(201).json(newProduct);
});

// PUT /api/products/:pid
router.put('/:pid', (req, res) => {
  const products = readProducts();
  const index = products.findIndex((p) => p.id === parseInt(req.params.pid));
  if (index === -1) return res.status(404).json({ error: 'Producto no encontrado' });

  products[index] = { ...products[index], ...req.body, id: products[index].id };
  writeProducts(products);
  res.json(products[index]);
});

// DELETE /api/products/:pid
router.delete('/:pid', (req, res) => {
  const products = readProducts();
  const filteredProducts = products.filter((p) => p.id !== parseInt(req.params.pid));
  if (products.length === filteredProducts.length) {
    return res.status(404).json({ error: 'Producto no encontrado' });
  }
  writeProducts(filteredProducts);
  res.json({ message: 'Producto eliminado' });
});

module.exports = router;
